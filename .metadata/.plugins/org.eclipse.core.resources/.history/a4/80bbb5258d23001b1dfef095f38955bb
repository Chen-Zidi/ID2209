/**
* Name: DutchAuction
* Based on the internal empty template. 
* Author: Zidi Chen, Sihan Chen
* Tags: 
*/


model DutchAuction

global
{
	int number_of_auctioneer<-1;
	int number_of_participant<-10;
	
	
	init
	{
		create Participant number:number_of_participant;
		create Arena number:1
		{
			location<-{50,50};
		}
		create Auctioneer number:number_of_auctioneer
		{
			location<-{50,50};
		}
	}
	
}

species Auctioneer skills:[fipa]
{
	bool startAuction;
	int initialPrice;
	int minPrice;
	int round;
	string merch;
	list<Participant> participantList;
	
	init
	{
		
	}
	
		
//	reflex startAuction when: time = 1 {
//		
//		participantList << Participant;
//		write 'Auctioneer, '+ time + ': broadcast the auction is about to start.';
//		do start_conversation (to: participantList, protocol: 'no-protocol', performative: 'inform', contents: ['start auction', merch]);
//		
//	
//	}
//	
	
//	reflex send_request when:(time=1)
//	{
//		Participant p<- Participant at 0;
//		write "send message";
//		do start_conversation (to::[p], protocal::'fipa-request',performative::'request',contents::['go sleeping']);
//	}
//	
//	reflex read_agree_message when: !(empty(agree))
//	{
//		loop a over:agrees
//		{
//			write "agree message with content: " + string(a.contents);
//		}
//	}
//	
//	reflex read_failure_message when: !(empty(failures))
//	{
//		loop f over:failures
//		{
//			write "failure message with content: " + string(f.contents);
//		}
//	}
	
	aspect base
	{
		draw circle(3) color: #yellow;
	}
}

species Participant skills:[fipa,moving]
{
	rgb color <- #grey;
	point arena<-{50,50};
	
//	reflex receiveStartAuctionMsg when : (!empty(informs)) and location distance_to(arena) > 15
//	{
//		do goto target: arena;
//		write 'Participant, ' +time+': receive broadcast, go to join the broadcast';
//		do accept_proposal (message: informs[0], contents: ['join']);
//	}
	
//	reflex reply_message when:(!empty(requests))
//	{
//		message requestFromAuctioneer<-(requests at 0);
//		do agree with : (message:requestFromAcutioneer,contents:['I will']);
//		
//		write 'inform failure';
//		do failure (message:requestFromAcutioneer,contents:['broken']);
//	}
	
	aspect base
	{
		draw circle(2) color: color;
	}
}


species Arena
{
	aspect base
	{
		draw circle(15) color: #purple;
	}
}

experiment main type:gui
{
	output
	{
		display map type:opengl
		{
			
			
			species Arena aspect:base;
			
			
		}
	}
	
}
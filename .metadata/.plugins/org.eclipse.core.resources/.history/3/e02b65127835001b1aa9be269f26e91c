/**
* Name: ProjectModel
* Based on the internal empty template. 
* Author: Zidi Chen, Sihan Chen
* 
* 
* People come to festival
* 
* personal traits: generous, didactic, health conscious
* 
* place: bar, restaurant, film, band
* 
* People type: chill, party, bad children, vegan, meat eater
* 
* conflict: 
* 
* bar : chill - party : generous(party)
* film : bad children - chill : didactic(chill)
* restaurant : vegan - meat eater : health conscious(meat eater)
* 
* 
* trace the happiness of the chill people
* 
* 
*/


model ProjectModel

global{

	int themeCounter <- 0;
	list<Guest> guestList;
	list<Stage> stageList;
	list<string> themeList <- ['bar','restaurant','film','band'];
	list<string> guestTypeList <- ['chill', 'party', 'bad children', 'vegan', 'meat eater'];
	init{
		create Stage number: 1{
			location <- {25,25};
			position <- {25,25};
			stageList << self;
		}
		
		create Stage number: 1{
			location <- {25,75};
			position <- {25,75};
			stageList << self;
		}
		
		create Stage number: 1{
			location <- {75,25};
			position <- {75,25};
			stageList << self;
		}
		
		create Stage number: 1{
			location <- {75,75};
			position <- {75,75};
			stageList << self;
		}
		
		loop t over:guestTypeList{
				create Guest number:10{
				self.type <- t;
				guestList << self;
				write '[' + self + ']' + ' my type is : ' + self.type;
			}
		}
		
		
	}
	
}

species Guest skills:[moving, fipa]{
	float generous;
	float didactic;
	float healthConscious;
	
	int timer <- 0 update: timer + 1;
	
	float happiness;

	string type <- nil;
	
	Stage targetStage <- nil;
	
	rgb color <- #yellow;
	
	map<string,Stage> stages <- [themeList[0]::stageList[0],themeList[1]::stageList[0],themeList[2]::stageList[0],themeList[3]::stageList[0]];
	
	init{
		generous <- rnd(0,1.0);
		didactic <- rnd(0,1.0);
		healthConscious <- rnd(0,1.0);
		
		ask Stage{
			myself.stages[self.theme] <- self;
		}
		
//		write stages;
	}
	
	//the guests change target stage at certain time
	reflex updateTarget when:(timer mod 100) = 0 or timer = 1{
//		bool gotoStage <- flip(0.6);
		color <- #yellow;
		
//		if(gotoStage){
			targetStage <- stageList[rnd(0,length(stageList)-1)];
//		}
		
		
	}

	reflex partyPeopleInBar when:type='party' and location distance_to stages['bar'] <= 10 and targetStage.theme='bar'{
		
		do start_conversation (to: guestList , protocol: 'no-protocol', performative: 'inform', contents: ['party','bar',generous]);
		
		
	}
	
//	reflex badChildrenInFilm when:type='bad children' and location distance_to stages['film'] <= 10 and targetStage = 'film'{
//		
//		do start_conversation (to: guestList , protocol: 'fipa-contract-net', performative: 'cfp', contents: ['bad children','film']);
//		
//	}
//	
//	reflex cillPeopleInFilm when:type = 'chill' and location distance_to stages['film'] <= 10 and !(empty(cfps)) and targetStage = 'film'{
//		bool annoyed <- false;
//		list<message> msg <- cfps;
//		loop m over:msg{
//			list content <- list(m.contents);
//			string peopleType <- string(content[0]);
//			string place <- string(content[1]);
//			
//			if(peopleType = 'bad children' and place = 'film' and didactic < 0.7){
//				annoyed <- true;
//			}else if(peopleType = 'bad children' and place = 'film' and didactic >= 0.7){
//				write '['+ self + ']' + ': I will stay and I will educate the bad children.';
//			}
//			
//			
//		}
//		
//		if(annoyed){
//			color <- #red;
//			list<Stage> newTargetList;
//			ask Stage{
//				if(self.theme != 'film'){
//					newTargetList << self;
//				}
//			}
//			write '['+ self + ']' + ': I am annoyed for bad children.';
//			targetStage <- newTargetList[rnd(0,length(newTargetList)-1)];
//		}		
//	}

	reflex chillPeopleInBar when:type = 'chill' and location distance_to stages['bar'] <= 10 and !(empty(informs)) and targetStage.theme = 'bar'{
		bool annoyed <- false;
		list<message> msg <- informs;
		loop m over:msg{
			list content <- list(m.contents);
			string peopleType <- string(content[0]);
			string place <- string(content[1]);
			float generousFactor <- float(content[2]);
			
			if(peopleType = 'party' and place = 'bar' and generousFactor < 0.7){
				annoyed <- true;
			}else if(peopleType = 'party' and place = 'bar' and generousFactor >= 0.7){
				write '['+ self + ', ' + self.type + ']' + ': I meet party people in bar. I will stay for his generousity';
			}
			
			
		}
		
		if(annoyed){
			color <- #red;
			list<Stage> newTargetList;
			ask Stage{
				if(self.theme != 'bar'){
					newTargetList << self;
				}
			}
			write '['+ self + ', ' + self.type + ']' + ': I am annoyed by party people in bar.';
			targetStage <- newTargetList[rnd(0,length(newTargetList)-1)];
		}		
		
	}

	reflex wanderWithoutTarget when:targetStage = nil{
		do wander;
	}

	reflex wander when:targetStage != nil and location distance_to targetStage <= 10{
		do wander;
		write '['+ self + ', ' + self.type +  ']' + ': I am at ' + targetStage.theme + '.';
	}
		
	reflex gotoTargetStage when:targetStage != nil and location distance_to targetStage > 10{
		do goto target:targetStage;
	}


	aspect base{
			draw sphere(2) color: color;
		}	
}


species Stage {
	rgb color;
	string theme;
	point position;
	
	init{
		theme <- themeList[themeCounter];
		themeCounter <- themeCounter + 1;
		if(theme = 'bar'){
			color <- #blue;
		}else if(theme = 'restaurant'){
			color <- #green;
		}else if(theme = 'film'){
			color <- #pink;
		}else if(theme = 'band'){
			color <- #purple;
		}else{
			color <- #black;
			
		}
		
		write '[' + self + ']' + ' my theme is : ' + theme;
	}
	
	
	aspect base{
			draw circle(10) color: color;
		}
}

experiment main type:gui{
	output{
		display map type:opengl{
			
			species Guest aspect:base;
			species Stage aspect:base;
		}
	}
	
}
